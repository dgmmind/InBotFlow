import { makeWASocket, useMultiFileAuthState, DisconnectReason, makeCacheableSignalKeyStore, Browsers } from '@whiskeysockets/baileys';
import baileysHelper from "baileys_helper";

import pino from 'pino';
import qrcode from 'qrcode-terminal';

export class WhatsAppService {
    constructor() {
        this.sock = null;
        this.authState = null;
        this.isConnected = false;
    }

    shouldProcessMessage(msg, type) {
        if (type !== 'notify') return false;
        if (msg.key.fromMe) return false;
        if (!msg.message) return false;
        if (msg.message.protocolMessage || msg.message.senderKeyDistributionMessage) return false;
        return true;
    }

    // registerMessageHandler() {
    //     this.sock.ev.removeAllListeners('messages.upsert');
    //     this.sock.ev.on('messages.upsert', async ({ messages, type }) => {
    //         for (const msg of messages) {
    //             if (!this.shouldProcessMessage(msg, type)) continue;
    //             const { key } = msg;
    //             const from = key.remoteJid;
    //             const sender = key.participant || from;
    //             console.log(`Mensaje recibido de: ${sender}`);
    //             await this.sock.sendMessage(from, { text: '¬°Mensaje recibido!' });
    //         }
    //     });
    // }

    registerMessageHandler() {
        this.sock.ev.removeAllListeners('messages.upsert');
        this.sock.ev.on('messages.upsert', async ({ messages, type }) => {
            for (const msg of messages) {
                if (!this.shouldProcessMessage(msg, type)) continue;
    
                const { key } = msg;
                const from = key.remoteJid;
                const sender = key.participant || from;
                console.log(`Mensaje recibido de: ${sender}`);
    
                // await baileysHelper.sendButtons(this.sock, from, {
                //     title: 'Header Title',            // optional header
                //     text: 'Pick one option below',    // body
                //     footer: 'Footer text',            // optional footer
                //     buttons: [
                //       { id: 'quick_1', text: 'Quick Reply' },       // legacy simple shape auto‚Äëconverted
                //       {
                //         name: 'cta_url',
                //         buttonParamsJson: JSON.stringify({
                //           display_text: 'Open Site',
                //           url: 'https://example.com'
                //         })
                //       }
                //     ]
                //   });
                // await baileysHelper.sendButtons(this.sock, from, {
                //     text: "Elige una opci√≥n:",
                //     footer: "Mi bot ü§ñ",
                //     buttons: [
                //       { id: "opt1", text: "Opci√≥n 1" },
                //       { id: "opt2", text: "Opci√≥n 2" }
                //     ]
                //   });

                // LIST BUTTON
                // await baileysHelper.sendInteractiveMessage(this.sock, from, {
                //     text: 'üëã ¬°Hola! Bienvenido a Neositio.\nSelecciona una opci√≥n:',
                //     footer: 'Elige la opci√≥n que te interesa',
                //     interactiveButtons: [
                //         {
                //             name: 'single_select',
                //             buttonParamsJson: JSON.stringify({
                //                 title: 'Men√∫ Principal',
                //                 sections: [
                //                     {
                //                         title: 'Servicios',
                //                         rows: [
                //                             { id: 'busqueda_empleo', title: 'Busco empleo', description: 'Encuentra oportunidades laborales' },
                //                             { id: 'reclutamiento', title: 'Quiero reclutar', description: 'Publica ofertas de empleo' },
                //                             { id: 'info_servicios', title: 'Ver servicios', description: 'Conoce nuestros servicios' }
                //                         ]
                //                     }
                //                 ]
                //             })
                //         }
                //     ]
                // });
                // BOTONES AVANZADOS
                // await baileysHelper.sendInteractiveMessage(this.sock, from, {
                //     text: 'Bienvenido a Neositio. ¬øQu√© deseas hacer?',
                //     footer: 'Selecciona una opci√≥n',
                //     interactiveButtons: [
                //       // Bot√≥n r√°pido
                //       { 
                //         name: 'quick_reply', 
                //         buttonParamsJson: JSON.stringify({ display_text: 'Buscar empleo', id: 'job_search' }) 
                //       },
                //       // Bot√≥n de URL
                //       { 
                //         name: 'cta_url', 
                //         buttonParamsJson: JSON.stringify({ display_text: 'Visitar nuestro sitio', url: 'https://neositio.com' }) 
                //       },
                //       // Men√∫ desplegable
                //       { 
                //         name: 'single_select', 
                //         buttonParamsJson: JSON.stringify({
                //           title: 'Otras opciones',
                //           sections: [{
                //             title: 'Recursos',
                //             rows: [
                //               { id: 'social_media', title: 'Redes sociales', description: 'S√≠guenos y ent√©rate de novedades' },
                //               { id: 'recruit', title: 'Quiero reclutar', description: 'Publica tus vacantes' }
                //             ]
                //           }]
                //         })
                //       }
                //     ]
                //   });
                // BOTONES NORMAL
                await baileysHelper.sendInteractiveMessage(this.sock, from, {
                    text: '¬øDeseas continuar?',
                    footer: 'Selecciona una opci√≥n',
                    interactiveButtons: [
                      {
                        name: 'quick_reply',
                        buttonParamsJson: JSON.stringify({ display_text: 'S√≠', id: 'yes' })
                      },
                      {
                        name: 'quick_reply',
                        buttonParamsJson: JSON.stringify({ display_text: 'No', id: 'no' })
                      }
                    ]
                  });

                // BOTONES LISTA 2
                //   await baileysHelper.sendInteractiveMessage(this.sock, from, {
                //     text: '¬øDeseas continuar?',
                //     interactiveButtons: [
                //       {
                //         name: 'single_select',
                //         buttonParamsJson: JSON.stringify({
                //           title: 'Opciones',
                //           sections: [{
                //             title: 'Selecciona una',
                //             rows: [
                //               { id: 'yes', title: 'S√≠' },
                //               { id: 'no', title: 'No' }
                //             ]
                //           }]
                //         })
                //       }
                //     ]
                //   });
                
                
                  

            }
        });
    }
    
    async connect() {
        const { state, saveCreds } = await useMultiFileAuthState('./sessions');
        this.authState = { state, saveCreds };
        const log = pino({ level: 'error' });

        this.sock = makeWASocket({
            auth: {
                creds: state.creds,
                keys: makeCacheableSignalKeyStore(state.keys, log),
            },
            browser: Browsers.macOS('Desktop'),
            syncFullHistory: false,
            logger: log,
            shouldIgnoreJid: (jid) => /@g\.us/.test(jid) || jid === 'status@broadcast' || /@broadcast/.test(jid)
        });

        this.sock.ev.on('connection.update', async ({ connection, lastDisconnect, qr }) => {
            if (qr) {
                console.log('üîê Escanea este c√≥digo QR para vincular tu WhatsApp:');
                qrcode.generate(qr, { small: true });
            }
            if (connection === 'close') {
                this.isConnected = false;
                const shouldReconnect = lastDisconnect?.error?.output?.statusCode !== DisconnectReason.loggedOut;
                if (shouldReconnect) {
                    console.log('Reconectando en 3 segundos...');
                    setTimeout(() => this.connect(), 3000);
                } else {
                    console.log('Conexi√≥n cerrada por logout. Escanea el QR nuevamente.');
                }
            } else if (connection === 'open') {
                this.isConnected = true;
                console.log('‚úÖ Conexi√≥n establecida con WhatsApp');
                this.registerMessageHandler();
            }
        });

        this.sock.ev.on('lid-mapping.update', (mapping) => {
            console.log('LID mapping updated:', mapping);
        });

        this.sock.ev.on('creds.update', this.authState.saveCreds);
    }

    async sendMessage(to, text) {
        if (!this.sock) throw new Error('No hay conexi√≥n activa. Llama a connect() primero.');
        return await this.sock.sendMessage(to, { text });
    }

    async disconnect() {
        if (this.sock) {
            await this.sock.logout();
            this.sock = null;
            this.isConnected = false;
            console.log('Conexi√≥n desconectada.');
        }
    }
}